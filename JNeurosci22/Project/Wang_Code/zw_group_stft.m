function [out_array1, out_array2, out_array3] = zw_group_stft(...
    in_array, repo, ...
    interval_pre, interval_post, ...
    window, overlap, f_range, fs...
    )

n_repo = numel(repo);
out_array1 = zeros([n_repo, size(squeeze(in_array))]);
out_array2 = zeros(size(out_array1));
out_array3 = zeros([n_repo, 2]);

for i = 1:numel(repo)
    if and(...
            numel(repo(i).LFP) >= diff(interval_post)*fs, ...
            numel(repo(i).pretrial_LFP) >= diff(interval_pre)*fs...
            )
        post_onset = floor((repo(i).Cue_onT + interval_post(1))*fs);
        post_offset = post_onset + diff(interval_post)*fs - 1;
        pre_onset = floor(interval_pre(1)*fs) + 1;
        pre_offset  = floor(interval_pre(2)*fs);
        post_sig = repo(i).LFP(post_onset:post_offset)';
        pre_sig = repo(i).pretrial_LFP(end + pre_onset:end+ pre_offset)';
        out_array1(i, :, :) = zw_stft(...
            pre_sig, post_sig, 0, ...
            window, overlap, f_range, fs...
            );
        out_array2(i, :, :) = zw_stft(...
            pre_sig, post_sig, 1, ...
            window, overlap, f_range, fs...
            );
        out_array3(i, :) = zw_stft(...
            pre_sig, post_sig, 2, ...
            window, overlap, f_range, fs...
            );
    else
        out_array1(i, :, :) = nan;
        out_array2(i, :, :) = nan;
        out_array3(i, :) = nan;

    end
end
out_array1 = squeeze(nanmean(out_array1, 1));
out_array2 = squeeze(nanmean(out_array2, 1));
out_array3 = squeeze(nanmean(out_array3, 1));
end